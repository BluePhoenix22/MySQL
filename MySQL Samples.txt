
Write a SELECT statement that returns these column names and data from the Products table:product_name               The product_name column list_price                        The list_price column discount_percent            The discount_percent column discount_amount            A column that’s calculated from the previous two columns discount_price               A column that’s calculated from the previous three columns Round the discount_amount and discount_price columns to two decimal places. Sort the result set by the discount_price column in descending sequence. Use the LIMIT clause so the result set contains only the first five rows. Submit a screenshot.


QUERY:
SELECT 
    product_name AS 'Product Name',
    list_price AS 'List Price',
    discount_percent AS 'Discount Percent',
    ROUND(list_price * (discount_percent/100), 2) AS 'Discount Amount',
    ROUND(list_price - list_price * (discount_percent/100), 2) AS 'Discount Price'
FROM
    products
ORDER BY (list_price - list_price * (discount_percent/100)) DESC
LIMIT 5;


Write a SELECT statement that returns these column names and data from the Order_Items table:item_id                           The item_id column item_price                      The item_price column discount_amount            The discount_amount column quantity                          The quantity column price_total                       A column that’s calculated by multiplying the item price by the quantity discount_total                  A column that’s calculated by multiplying the discount amount by the quantity item_total                         A column that’s calculated by subtracting the discount amount from the item price and then multiplying by the quantity Only return rows where the item_total is greater than 500. Sort the result set by the item_total column in descending sequence. Submit a screenshot.
SELECT 
    item_id AS 'Item ID',
    item_price AS 'Item Price',
    discount_amount AS 'Discount Amount',
    quantity AS 'Quantity',
    (item_price * quantity) AS 'Price Total',
    (discount_amount * quantity) AS 'Discount Total',
    ((item_price - discount_amount) * quantity) AS 'Item Total'
FROM
    order_items
WHERE
    ((item_price - discount_amount) * quantity) > 500
ORDER BY ((item_price - discount_amount) * quantity) DESC;

Write a SELECT statement that returns the product_name and list_price columns from the Products table.Return one row for each product that has the same list price as another product. Hint: Use a self-join to check that the product_id columns aren’t equal but the list_price columns are equal. Sort the result set by the product_name column. Submit a screenshot.

SELECT DISTINCT
    p1.product_name,
    p1.list_price
FROM
    products p1
       INNER JOIN
    products p2 ON p1.list_price = p2.list_price
        AND p1.product_id != p2.product_id
ORDER BY
	p1.product_name


Write a SELECT statement that returns these two columns:category_name        The category_name column from the Categories table product_id               The product_id column from the Products table Return one row for each category that has never been used. Hint: Use an outer join and only return rows where the product_id column contains a null value. Submit a screenshot.

SELECT 
    c.category_name, p.product_id
FROM
    categories c
	LEFT JOIN
    products p ON c.category_id = p.category_id
WHERE
    p.product_id IS NULL;


Write an INSERT statement that adds this row to the Customers table:email_address:         rick@raven.com password:                (empty string) first_name:                Rick last_name:                 Raven Use a column list for this statement. Submit a screenshot.

INSERT INTO customers
(email_address, password, first_name, last_name)
VALUES 
('rick@raven.com','','Rick','Raven');


Write a SELECT statement that answers this question: Which customers have ordered more than one product? Return these columns:The email_address column from the Customers table The count of distinct products from the customer’s orders Sort the result set in ascending sequence by the email_address column. Submit a screenshot.

SELECT 
    c.email_address, COUNT(DISTINCT oi.product_id) AS Count_of_Distinct_Products
FROM
    customers AS c
        INNER JOIN
    orders o ON c.customer_id = o.customer_id
        INNER JOIN
    order_items oi ON o.order_id = oi.order_id
GROUP BY c.email_address
HAVING Count_of_Distinct_Products > 1;


Write a SELECT statement that answers this question: What is the total quantity purchased for each product within each category? Return these columnsThe category_name column from the category table The product_name column from the products table The total quantity purchased for each product with orders in the Order_Items table Use the WITH ROLLUP operator to include rows that give a summary for each category name as well as a row that gives the grand total. Use the IF and GROUPING functions to replace null values in the category_name and product_name columns with literal values if they’re for summary rows. Submit a screenshot.

SELECT 
	IF (c.category_name IS NULL, 'Total for All Categories', c.category_name) AS 'Category'
    , IF(p.product_name IS NULL, IF(c.category_name IS NULL, '', 'Category Total'), p.product_name) AS 'Product Name'
    , SUM(IF(o.quantity IS NULL, 0, o.quantity)) AS 'Total Quantity'
FROM categories c 
    LEFT JOIN products p ON p.category_id = c.category_id
	LEFT JOIN order_items o ON p.product_id = o.product_id
GROUP BY c.category_name, p.product_name 
	WITH ROLLUP;

Write and execute a script that creates a user with a username “xyz” and password of your choosing. This user should be able to connect to MySQL from any computer.This user should have SELECT, INSERT, UPDATE, and DELETE privileges for the Customers, Addresses, Orders, and Order_Items tables of the My Guitar Shop database. However, this user should only have SELECT privileges for the Products and Categories tables. Also, this user should not have the right to grant privileges to other users. Check the privileges for the user by using the SHOW GRANTS statement. Submit a screenshot.

CREATE USER IF NOT EXISTS
smith IDENTIFIED BY '123';

GRANT SELECT,INSERT,UPDATE,DELETE ON my_guitar_shop.Customers TO xyz;
GRANT SELECT,INSERT,UPDATE,DELETE ON my_guitar_shop.Addresses TO xyz;
GRANT SELECT,INSERT,UPDATE,DELETE ON my_guitar_shop.Orders TO xyz;
GRANT SELECT,INSERT,UPDATE,DELETE ON my_guitar_shop.Order_Items TO xyz;

GRANT SELECT ON my_guitar_shop.Products TO xyz;
GRANT SELECT ON my_guitar_shop.Categories TO xyz;

SHOW GRANTS FOR xyz;